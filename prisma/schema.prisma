generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id               Int             @id
  lastKnownName    String
  duelSkill        Float           @default(-1)
  duelSkillUn      Float           @default(-1)
  ffaSkill         Float           @default(-1)
  ffaSkillUn       Float           @default(-1)
  teamSkill        Float           @default(-1)
  teamSkillUn      Float           @default(-1)
  smallTeamSkill   Float           @default(-1)
  smallTeamSkillUn Float           @default(-1)
  lastDuel         DateTime        @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  lastFFA          DateTime        @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  lastTeam         DateTime        @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  lastSmallTeam    DateTime        @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  countryCode      String          @default("UNK")
  StartPosition    StartPosition[]
}

model Replay {
  id             String          @id
  winningPlayers Int[]
  losingPlayers  Int[]
  awards         Json            @db.JsonB
  players        Json            @db.JsonB
  time           DateTime
  duration       Int
  mapId          Int
  gameType       String
  ranked         Boolean         @default(true)
  map            Map             @relation(fields: [mapId], references: [id])
  StartPosition  StartPosition[]
  playerCount    Int?
  minSkill       Float?
  maxSkill       Float?
  avgSkill       Float?
  dataset        String?         @default("public")
  tweakdefId     String[]        @default([])
  tweakunitId    String[]        @default([])

  @@index([winningPlayers, losingPlayers], map: "replay_player_index", type: Gin)
}

model Map {
  id            Int             @id
  fileName      String
  scriptName    String
  cleanName     String
  height        Int
  width         Int
  Replay        Replay[]
  StartBox      StartBox[]
  StartPosition StartPosition[]
}

model StartPosition {
  xPos     Float
  yPos     Float
  zPos     Float
  mapId    Int
  playerId Int
  replayId String
  map      Map    @relation(fields: [mapId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  replay   Replay @relation(fields: [replayId], references: [id], onDelete: Cascade)

  @@id([playerId, replayId])
  @@index([xPos, zPos], map: "start_pos_btree_index")
  @@index([mapId], map: "start_pos_map_id_hash_index", type: Hash)
}

model StartBox {
  id     Int
  xPos   Float
  zPos   Float
  width  Float
  height Float
  name   String
  mapId  Int
  role   String
  map    Map    @relation(fields: [mapId], references: [id])

  @@id([mapId, id])
}

model AnalysisData {
  id              Int      @id @default(autoincrement())
  calculationTime DateTime
  weekAll         Json
  monthAll        Json
  totalAll        Json
  weekSkilled     Json
  monthSkilled    Json
  totalSkilled    Json
  playerSkills    Json
}

model TweakDefs {
  hash        String @id
  value       String
  replayCount Int    @default(0)
}

model TweakUnits {
  hash        String @id
  value       String
  replayCount Int    @default(0)
}
